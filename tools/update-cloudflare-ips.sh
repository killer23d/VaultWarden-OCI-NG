#!/usr/bin/env bash
# tools/update-cloudflare-ips.sh - Updates Cloudflare IP ranges for Caddy trusted proxies

# Ensure strict mode and error handling
set -euo pipefail

# --- Standardized Project Root Resolution ---
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"
cd "$PROJECT_ROOT"

# --- Standardized Library Sourcing ---
# Critical library - must exist
if [[ ! -f "lib/logging.sh" ]]; then
    echo "[ERROR] Critical library not found: lib/logging.sh" >&2
    echo "[ERROR] Ensure script is run from project directory or PROJECT_ROOT is correct" >&2
    exit 1
fi
source "lib/logging.sh"

# Additional libraries as needed (add after logging.sh)
# Source security library which contains the fetch function
if [[ ! -f "lib/security.sh" ]]; then
    log_error "CRITICAL: Required library not found: lib/security.sh"
    exit 1
fi
source "lib/security.sh" # Provides fetch_cloudflare_ips

# Set script-specific log prefix
_set_log_prefix "$(basename "$0" .sh)"

# --- Rest of script follows ---


# --- Configuration ---
# Use constants from constants.sh if available, otherwise define here
# (constants.sh should be sourced by security.sh)
readonly CADDY_IP_FILE="${CADDY_IP_FILE:-caddy/cloudflare-ips.caddy}" # Define CADDY_IP_FILE if not in constants

# --- Help text ---
show_help() {
    cat << 'EOF'
Update Cloudflare IP Ranges for VaultWarden-OCI-NG Caddy Config

USAGE:
    ./tools/update-cloudflare-ips.sh [OPTIONS]

DESCRIPTION:
    Fetches the latest Cloudflare IP ranges and updates the Caddy trusted proxy
    configuration import file (caddy/cloudflare-ips.caddy). This ensures Caddy correctly
    identifies real client IPs when traffic is proxied through Cloudflare.

    Typically run automatically via cron by tools/update-firewall-rules.sh, but can
    be run manually if needed.

OPTIONS:
    --help              Show this help message
    --validate          Validate current IP file without updating or fetching
    --force             Force update even if validation passes (not usually needed)

EXAMPLES:
    ./tools/update-cloudflare-ips.sh
    ./tools/update-cloudflare-ips.sh --validate
EOF
}

# --- Argument parsing ---
VALIDATE_ONLY=false
FORCE_UPDATE=false

while [[ $# -gt 0 ]]; do
    case $1 in
        --help) show_help; exit 0 ;;
        --validate) VALIDATE_ONLY=true; shift ;;
        --force) FORCE_UPDATE=true; shift ;; # Added force flag
        *) log_error "Unknown option: $1"; show_help; exit 1 ;;
    esac
done

# --- Functions ---

validate_current_file() {
    log_info "Validating current Caddy IP file: $CADDY_IP_FILE"
    if [[ ! -f "$CADDY_IP_FILE" ]]; then
        log_warn "Caddy IP file does not exist: $CADDY_IP_FILE"
        return 1
    fi

    # Check for core structure: @cloudflare block and remote_ip directive
    if ! grep -q "@cloudflare {" "$CADDY_IP_FILE" || ! grep -q "remote_ip" "$CADDY_IP_FILE"; then
        log_error "Current Caddy IP file has incorrect structure. Missing '@cloudflare' block or 'remote_ip'."
        return 1
    fi

    # Count IP/CIDR entries (simple count of space-separated items after remote_ip)
    local ip_count
    ip_count=$(grep "remote_ip" "$CADDY_IP_FILE" | head -n 1 | awk '{print NF-1}') # NF-1 gives count after 'remote_ip'

    if [[ "$ip_count" -lt 10 ]]; then # Expect at least a few IPs/ranges
        log_warn "Found only $ip_count IP/range entries in current file. Seems low."
        # Don't fail validation, but warn
    else
         log_success "Current Caddy IP file appears valid ($ip_count IP/range entries found)."
    fi

    return 0 # Assume valid structure is enough for this check
}

update_caddy_ip_file() {
    local temp_file="/tmp/cf_ips.$$.txt"
    # Ensure temp file is removed on exit/error
    trap 'rm -f "$temp_file"' RETURN

    # P2 FIX: Use centralized fetch function from existing lib/security.sh
    log_info "Fetching latest Cloudflare IP ranges..."
    if ! fetch_cloudflare_ips "$temp_file"; then
        log_error "Failed to fetch Cloudflare IP ranges. Caddy file not updated."
        return 1
    fi

    # Check if fetched file has content
    if [[ ! -s "$temp_file" ]]; then
         log_error "Fetched IP list is empty. Aborting update."
         return 1
    fi

    # Generate Caddy configuration format
    log_info "Generating Caddy trusted proxy configuration..."
    local temp_caddy_file="${CADDY_IP_FILE}.tmp.$$"
    # Ensure temp caddy file is removed on exit/error if move fails
    trap 'rm -f "$temp_file" "$temp_caddy_file"' RETURN

    # Create content for the new file
    {
        echo "# Generated by $(basename "$0") on $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
        echo "# Cloudflare IP ranges for Caddy trusted proxy configuration"
        echo "@cloudflare {"
        # Read IPs/CIDRs from temp_file, trim whitespace, join with spaces on one line
        echo -n "  remote_ip "
        paste -sd ' ' "$temp_file" # paste -s joins lines, -d ' ' uses space delimiter
        echo "" # Newline after IPs
        echo "}"
    } > "$temp_caddy_file" || { log_error "Failed to write temporary Caddy file $temp_caddy_file"; return 1; }

    # Validate the generated temp Caddy file before replacing the original
    if ! grep -q "@cloudflare {" "$temp_caddy_file" || ! grep -q "remote_ip" "$temp_caddy_file"; then
         log_error "Generated Caddy file $temp_caddy_file seems invalid. Aborting update."
         return 1
    fi

    # Replace the old file with the new one atomically
    if mv "$temp_caddy_file" "$CADDY_IP_FILE"; then
        local ip_count
        ip_count=$(wc -l < "$temp_file") # Count lines in the source IP list
        log_success "Updated $CADDY_IP_FILE with $ip_count Cloudflare IP ranges."
        chmod 644 "$CADDY_IP_FILE" || log_warn "Failed to set permissions on $CADDY_IP_FILE"
        # Cleanup trap will handle removing $temp_file. $temp_caddy_file was moved.
        trap - RETURN # Clear trap after successful move
        rm -f "$temp_file" # Explicit cleanup just in case
        return 0 # Success
    else
        log_error "Failed to replace $CADDY_IP_FILE with the updated version."
        # Cleanup trap will handle removing both temp files
        return 1 # Failure
    fi
}

# --- Main execution ---
main() {

    if [[ "$VALIDATE_ONLY" == "true" ]]; then
        log_header "Validating Current Cloudflare IP Caddy File"
        if validate_current_file; then
            log_success "Validation completed successfully."
            exit 0
        else
            log_error "Validation failed."
            exit 1
        fi
    fi

    log_header "Updating Cloudflare IP Ranges for Caddy"

    # Validate current file if it exists and update is not forced
    local needs_update=true
    if [[ -f "$CADDY_IP_FILE" && "$FORCE_UPDATE" == "false" ]]; then
        log_info "Validating current configuration before potentially updating..."
        if validate_current_file; then
             log_info "Current file seems valid. Update might not be necessary unless IPs changed."
             # Simple check: update only if file is older than 1 day?
             if find "$CADDY_IP_FILE" -mtime +0 | grep -q .; then
                 log_info "Current file is older than 24 hours. Proceeding with update."
                 needs_update=true
             else
                 log_info "Current file is less than 24 hours old. Skipping update unless --force is used."
                 needs_update=false
             fi
        else
             log_warn "Current file validation failed. Proceeding with update."
             needs_update=true
        fi
    fi

    # Perform update if needed or forced
    if [[ "$needs_update" == "true" || "$FORCE_UPDATE" == "true" ]]; then
        if [[ "$FORCE_UPDATE" == "true" ]]; then log_info "Forcing update as requested."; fi
        if update_caddy_ip_file; then
            log_success "Cloudflare IP Caddy file updated successfully."
            log_info "Reload Caddy to apply changes: 'docker compose exec caddy caddy reload --config /etc/caddy/Caddyfile' or restart Caddy container."
            exit 0
        else
            log_error "Failed to update Cloudflare IP Caddy file."
            exit 1
        fi
    else
        log_success "Update skipped (current file is valid and recent, or --force not used)."
        exit 0
    fi
}

# Execute main function
main
